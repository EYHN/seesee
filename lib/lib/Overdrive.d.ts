/// <reference types="react" />
import * as React from 'react';
export interface OverdriveProps {
    id: string;
    element?: string;
    /**
     * The event of animation end.
     */
    onAnimationEnd?: () => void;
    style?: React.CSSProperties;
    /**
     * The animation duration milliseconds.
     */
    duration?: number;
    /**
     * Delay milliseconds before the animation.
     */
    animationDelay?: number;
}
export interface OverdrivePosition {
    top: number;
    left: number;
    width: number;
    height: number;
    margin: string;
    padding: string;
    borderRadius: string;
    position: 'absolute';
}
export default class Overdrive extends React.Component<OverdriveProps> {
    state: {
        loading: boolean;
    };
    bodyElement: HTMLDivElement;
    animationTimeout: number;
    animationDelayTimeout: number;
    element: HTMLElement;
    onShowLock: boolean;
    constructor(props: OverdriveProps);
    animate(prevPosition: OverdrivePosition, prevElement: React.ReactElement<any>): void;
    animateEnd: () => void;
    onHide(): void;
    onShow(): void;
    componentDidMount(): void;
    clearAnimations(): void;
    componentWillUnmount(): void;
    componentWillReceiveProps(): void;
    componentDidUpdate(): void;
    getPosition(addOffset: boolean): OverdrivePosition;
    render(): React.DOMElement<{
        onAnimationEnd?: () => void;
        ref: (c: Element) => HTMLElement;
        style: {
            opacity: number;
            alignContent?: "initial" | "inherit" | "unset" | "flex-start" | "flex-end" | "center" | "space-between" | "space-around" | "stretch";
            alignItems?: "initial" | "inherit" | "unset" | "flex-start" | "flex-end" | "center" | "stretch" | "baseline";
            alignSelf?: "initial" | "inherit" | "unset" | "auto" | "flex-start" | "flex-end" | "center" | "stretch" | "baseline";
            alignmentAdjust?: any;
            alignmentBaseline?: any;
            animationDelay?: any;
            animationDirection?: any;
            animationIterationCount?: any;
            animationName?: any;
            animationPlayState?: any;
            appearance?: any;
            backfaceVisibility?: any;
            background?: any;
            backgroundAttachment?: "initial" | "inherit" | "unset" | "fixed" | "scroll" | "local";
            backgroundBlendMode?: any;
            backgroundColor?: any;
            backgroundComposite?: any;
            backgroundImage?: any;
            backgroundOrigin?: any;
            backgroundPosition?: any;
            backgroundRepeat?: any;
            backgroundSize?: any;
            baselineShift?: any;
            behavior?: any;
            border?: any;
            borderBottom?: any;
            borderBottomColor?: any;
            borderBottomLeftRadius?: React.ReactText;
            borderBottomRightRadius?: React.ReactText;
            borderBottomStyle?: any;
            borderBottomWidth?: any;
            borderCollapse?: any;
            borderColor?: any;
            borderCornerShape?: any;
            borderImageSource?: any;
            borderImageWidth?: any;
            borderLeft?: any;
            borderLeftColor?: any;
            borderLeftStyle?: any;
            borderLeftWidth?: any;
            borderRadius?: React.ReactText;
            borderRight?: any;
            borderRightColor?: any;
            borderRightStyle?: any;
            borderRightWidth?: any;
            borderSpacing?: any;
            borderStyle?: any;
            borderTop?: any;
            borderTopColor?: any;
            borderTopLeftRadius?: React.ReactText;
            borderTopRightRadius?: React.ReactText;
            borderTopStyle?: any;
            borderTopWidth?: any;
            borderWidth?: any;
            bottom?: any;
            boxAlign?: any;
            boxDecorationBreak?: any;
            boxDirection?: any;
            boxLineProgression?: any;
            boxLines?: any;
            boxOrdinalGroup?: any;
            boxFlex?: number | "initial" | "inherit" | "unset";
            boxFlexGroup?: number | "initial" | "inherit" | "unset";
            boxShadow?: any;
            breakAfter?: any;
            breakBefore?: any;
            breakInside?: any;
            clear?: any;
            clip?: any;
            clipRule?: any;
            color?: any;
            columnCount?: number | "initial" | "inherit" | "unset" | "auto";
            columnFill?: any;
            columnGap?: any;
            columnRule?: any;
            columnRuleColor?: any;
            columnRuleWidth?: any;
            columnSpan?: any;
            columnWidth?: any;
            columns?: any;
            counterIncrement?: any;
            counterReset?: any;
            cue?: any;
            cueAfter?: any;
            cursor?: any;
            direction?: any;
            display?: any;
            fill?: any;
            fillOpacity?: number | "initial" | "inherit" | "unset";
            fillRule?: any;
            filter?: any;
            flex?: React.ReactText;
            flexAlign?: any;
            flexBasis?: any;
            flexDirection?: "initial" | "inherit" | "unset" | "row" | "row-reverse" | "column" | "column-reverse";
            flexFlow?: string;
            flexGrow?: number | "initial" | "inherit" | "unset";
            flexItemAlign?: any;
            flexLinePack?: any;
            flexOrder?: any;
            flexShrink?: number | "initial" | "inherit" | "unset";
            flexWrap?: "initial" | "inherit" | "unset" | "nowrap" | "wrap" | "wrap-reverse";
            float?: any;
            flowFrom?: any;
            font?: any;
            fontFamily?: any;
            fontKerning?: any;
            fontSize?: React.ReactText;
            fontSizeAdjust?: number | "initial" | "inherit" | "unset" | "none";
            fontStretch?: "initial" | "inherit" | "unset" | "normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded";
            fontStyle?: "initial" | "inherit" | "unset" | "normal" | "italic" | "oblique";
            fontSynthesis?: any;
            fontVariant?: any;
            fontVariantAlternates?: any;
            fontWeight?: "initial" | "inherit" | "unset" | "normal" | "bold" | "bolder" | "lighter" | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
            gridArea?: any;
            gridColumn?: any;
            gridColumnEnd?: any;
            gridColumnStart?: any;
            gridRow?: any;
            gridRowEnd?: any;
            gridRowPosition?: any;
            gridRowSpan?: any;
            gridTemplateAreas?: any;
            gridTemplateColumns?: any;
            gridTemplateRows?: any;
            height?: any;
            hyphenateLimitChars?: any;
            hyphenateLimitLines?: any;
            hyphenateLimitZone?: any;
            hyphens?: any;
            imeMode?: any;
            justifyContent?: "initial" | "inherit" | "unset" | "flex-start" | "flex-end" | "center" | "space-between" | "space-around" | "space-evenly" | "stretch";
            layoutGrid?: any;
            layoutGridChar?: any;
            layoutGridLine?: any;
            layoutGridMode?: any;
            layoutGridType?: any;
            left?: any;
            letterSpacing?: any;
            lineBreak?: any;
            lineClamp?: number | "initial" | "inherit" | "unset";
            lineHeight?: React.ReactText;
            listStyle?: any;
            listStyleImage?: any;
            listStylePosition?: any;
            listStyleType?: any;
            margin?: any;
            marginBottom?: any;
            marginLeft?: any;
            marginRight?: any;
            marginTop?: any;
            marqueeDirection?: any;
            marqueeStyle?: any;
            mask?: any;
            maskBorder?: any;
            maskBorderRepeat?: any;
            maskBorderSlice?: any;
            maskBorderSource?: any;
            maskBorderWidth?: any;
            maskClip?: any;
            maskOrigin?: any;
            maxFontSize?: any;
            maxHeight?: any;
            maxWidth?: any;
            minHeight?: any;
            minWidth?: any;
            order?: number | "initial" | "inherit" | "unset";
            orphans?: number | "initial" | "inherit" | "unset";
            outline?: any;
            outlineColor?: any;
            outlineOffset?: any;
            overflow?: "initial" | "inherit" | "unset" | "auto" | "scroll" | "hidden" | "visible";
            overflowStyle?: any;
            overflowX?: "initial" | "inherit" | "unset" | "auto" | "scroll" | "hidden" | "visible";
            overflowY?: "initial" | "inherit" | "unset" | "auto" | "scroll" | "hidden" | "visible";
            padding?: any;
            paddingBottom?: any;
            paddingLeft?: any;
            paddingRight?: any;
            paddingTop?: any;
            pageBreakAfter?: any;
            pageBreakBefore?: any;
            pageBreakInside?: any;
            pause?: any;
            pauseAfter?: any;
            pauseBefore?: any;
            perspective?: any;
            perspectiveOrigin?: any;
            pointerEvents?: any;
            position?: "initial" | "inherit" | "unset" | "static" | "relative" | "absolute" | "fixed" | "sticky";
            punctuationTrim?: any;
            quotes?: any;
            regionFragment?: any;
            restAfter?: any;
            restBefore?: any;
            right?: any;
            rubyAlign?: any;
            rubyPosition?: any;
            shapeImageThreshold?: any;
            shapeInside?: any;
            shapeMargin?: any;
            shapeOutside?: any;
            speak?: any;
            speakAs?: any;
            strokeOpacity?: number | "initial" | "inherit" | "unset";
            strokeWidth?: React.ReactText;
            tabSize?: any;
            tableLayout?: any;
            textAlign?: any;
            textAlignLast?: any;
            textDecoration?: any;
            textDecorationColor?: any;
            textDecorationLine?: any;
            textDecorationLineThrough?: any;
            textDecorationNone?: any;
            textDecorationOverline?: any;
            textDecorationSkip?: any;
            textDecorationStyle?: any;
            textDecorationUnderline?: any;
            textEmphasis?: any;
            textEmphasisColor?: any;
            textEmphasisStyle?: any;
            textHeight?: any;
            textIndent?: any;
            textJustifyTrim?: any;
            textKashidaSpace?: any;
            textLineThrough?: any;
            textLineThroughColor?: any;
            textLineThroughMode?: any;
            textLineThroughStyle?: any;
            textLineThroughWidth?: any;
            textOverflow?: any;
            textOverline?: any;
            textOverlineColor?: any;
            textOverlineMode?: any;
            textOverlineStyle?: any;
            textOverlineWidth?: any;
            textRendering?: any;
            textScript?: any;
            textShadow?: any;
            textTransform?: any;
            textUnderlinePosition?: any;
            textUnderlineStyle?: any;
            top?: any;
            touchAction?: any;
            transform?: any;
            transformOrigin?: any;
            transformOriginZ?: any;
            transformStyle?: any;
            transition?: any;
            transitionDelay?: any;
            transitionDuration?: any;
            transitionProperty?: any;
            transitionTimingFunction?: any;
            unicodeBidi?: any;
            unicodeRange?: any;
            userFocus?: any;
            userInput?: any;
            verticalAlign?: any;
            visibility?: any;
            voiceBalance?: any;
            voiceDuration?: any;
            voiceFamily?: any;
            voicePitch?: any;
            voiceRange?: any;
            voiceRate?: any;
            voiceStress?: any;
            voiceVolume?: any;
            whiteSpace?: any;
            whiteSpaceTreatment?: any;
            widows?: number | "initial" | "inherit" | "unset";
            width?: any;
            wordBreak?: any;
            wordSpacing?: any;
            wordWrap?: any;
            wrapFlow?: any;
            wrapMargin?: any;
            wrapOption?: any;
            writingMode?: any;
            zIndex?: number | "initial" | "inherit" | "unset" | "auto";
            zoom?: React.ReactText;
        };
    }, Element>;
}
